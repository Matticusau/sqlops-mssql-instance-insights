{"version":3,"sources":["../src/controllers/instanceUtils.ts"],"names":[],"mappings":"AAAA,EAAE;AACF,uBAAuB;AACvB,sBAAsB;AACtB,yBAAyB;AACzB,EAAE;AACF,gCAAgC;AAChC,6FAA6F;AAC7F,wCAAwC;AACxC,EAAE;AAEF,YAAY,CAAC;;;;;;;;;;AAEb,iCAAiC;AAEjC;IAKW,MAAM,CAAO,qBAAqB;;YAC3C,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE;gBAC7B,2DAA2D;gBAC3D,IAAI,iBAAiB,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,oBAAoB,EAAE,CAAC;gBACvE,uEAAuE;gBAChF,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,YAAY,CAAC,WAAW,CAA4B,iBAAiB,CAAC,YAAY,EAAE,MAAM,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;aACjK;YACD,OAAO,aAAa,CAAC,kBAAkB,CAAC;QACtC,CAAC;KAAA;IAEG,MAAM,CAAO,YAAY,CAAC,QAAgB;;YAChD,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE;gBACtC,IAAI,iBAAiB,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,oBAAoB,EAAE,CAAC;gBACvE,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,YAAY,CAAC,WAAW,CAA4B,iBAAiB,CAAC,YAAY,EAAE,MAAM,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;aACjK;YACD,OAAO,aAAa,CAAC,kBAAkB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE;gBACpF,IAAI,MAAM,IAAI,MAAM,CAAC,aAAa,IAAI,MAAM,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;oBACtE,OAAO,MAAM,CAAC,aAAa,CAAC;iBAC5B;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;KAAA;IAEM,MAAM,CAAO,gBAAgB;;YACnC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE;gBAClC,IAAI,iBAAiB,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,oBAAoB,EAAE,CAAC;gBACvE,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,YAAY,CAAC,WAAW,CAAuB,iBAAiB,CAAC,YAAY,EAAE,MAAM,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;aACnJ;YACD,OAAO,IAAI,CAAC,cAAc,CAAC;QACzB,CAAC;KAAA;CAEJ;AAnCD,sCAmCC","file":"instanceUtils.js","sourcesContent":["//\r\n// Author:  Matt Lavery\r\n// Date:    23/07/2018\r\n// Purpose: InstanceUtils\r\n//\r\n// When         Who         What\r\n// ------------------------------------------------------------------------------------------\r\n// 23/07/2018   MLavery     Initial Code\r\n//\r\n\r\n'use strict';\r\n\r\nimport * as sqlops from 'sqlops';\r\n\r\nexport class InstanceUtils {\r\n\r\n\tprivate static _connectionService: sqlops.ConnectionProvider;\r\n\tprivate static _queryProvider: sqlops.QueryProvider;\r\n\r\n    public static async getConnectionProvider(): Promise<sqlops.ConnectionProvider> {\r\n\t\tif (!InstanceUtils._connectionService) {\r\n            // console.log('sqlops.connection.getCurrentConnection()');\r\n            let currentConnection = await sqlops.connection.getCurrentConnection();\r\n            // console.log('currentConnection='+JSON.stringify(currentConnection));\r\n\t\t\tthis._connectionService = sqlops.dataprotocol.getProvider<sqlops.ConnectionProvider>(currentConnection.providerName, sqlops.DataProviderType.ConnectionProvider);\r\n\t\t}\r\n\t\treturn InstanceUtils._connectionService;\r\n    }\r\n        \r\n\tpublic static async getDatabases(ownerUri: string): Promise<string[]> {\r\n\t\tif (!InstanceUtils._connectionService) {\r\n\t\t\tlet currentConnection = await sqlops.connection.getCurrentConnection();\r\n\t\t\tthis._connectionService = sqlops.dataprotocol.getProvider<sqlops.ConnectionProvider>(currentConnection.providerName, sqlops.DataProviderType.ConnectionProvider);\r\n\t\t}\r\n\t\treturn InstanceUtils._connectionService.listDatabases(ownerUri).then((result: any) => {\r\n\t\t\tif (result && result.databaseNames && result.databaseNames.length > 0) {\r\n\t\t\t\treturn result.databaseNames;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic static async getQueryProvider(): Promise<sqlops.QueryProvider> {\r\n\t\tif (!InstanceUtils._queryProvider) {\r\n\t\t\tlet currentConnection = await sqlops.connection.getCurrentConnection();\r\n\t\t\tthis._queryProvider = sqlops.dataprotocol.getProvider<sqlops.QueryProvider>(currentConnection.providerName, sqlops.DataProviderType.QueryProvider);\r\n\t\t}\r\n\t\treturn this._queryProvider;\r\n    }\r\n\r\n}"],"sourceRoot":"C:\\GitHub\\sqlops-mssql-instance-insights/src"}