{"version":3,"sources":["../src/apiWrapper.ts"],"names":[],"mappings":"AAAA,EAAE;AACF,uBAAuB;AACvB,sBAAsB;AACtB,sBAAsB;AACtB,EAAE;AACF,gCAAgC;AAChC,6FAA6F;AAC7F,gEAAgE;AAChE,EAAE;AAGF;;;gGAGgG;AAEhG,YAAY,CAAC;;AACb,iCAAiC;AACjC,+BAA+B;AAE/B;;;;;;GAMG;AACH;IACI,YAAY;IAEL,uBAAuB,CAAC,QAAgB,EAAE,OAAiD;QAC9F,OAAO,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACrE,CAAC;IAGM,2BAA2B,CAAC,QAAgB,EAAE,OAAiD;QAClG,OAAO,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACrE,CAAC;IAED;;;;OAIG;IACI,gBAAgB,CAAC,aAAqB,EAAE,QAA8B;QACzE,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAC9B,IAAI;gBACA,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;aACtC;YAAC,OAAO,CAAC,EAAE;gBACR,QAAQ,GAAG,SAAS,CAAC;aACxB;SACJ;QACD,OAAO,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,EAAE,QAAsB,CAAC,CAAC;IACpF,CAAC;IAED;;OAEG;IACI,QAAQ,CAAC,GAAW;QACvB,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAEM,cAAc,CAAC,OAAiC;QACnD,OAAO,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;IAEM,gBAAgB,CAAC,OAAe,EAAE,GAAG,KAAe;QACvD,OAAO,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,CAAC;IAC7D,CAAC;CAOJ;AAhDD,gCAgDC","file":"apiWrapper.js","sourcesContent":["//\n// Author:  Matt Lavery\n// Date:    23/07/2018\n// Purpose: apiWrapper\n//\n// When         Who         What\n// ------------------------------------------------------------------------------------------\n// 23/07/2018   MLavery     Code taken from the Agent extension \n//\n\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\nimport * as vscode from 'vscode';\nimport * as data from 'sqlops';\n\n/**\n * Wrapper class to act as a facade over VSCode and Data APIs and allow us to test / mock callbacks into\n * this API from our code\n *\n * @export\n * @class ApiWrapper\n */\nexport class ApiWrapper {\n    // Data APIs\n\n    public registerWebviewProvider(widgetId: string, handler: (webview: data.DashboardWebview) => void): void {\n        return data.dashboard.registerWebviewProvider(widgetId, handler);\n    }\n\n\n    public registerControlHostProvider(widgetId: string, handler: (webview: data.DashboardWebview) => void): void {\n        return data.dashboard.registerWebviewProvider(widgetId, handler);\n    }\n\n    /**\n     * Get the configuration for a extensionName\n     * @param extensionName The string name of the extension to get the configuration for\n     * @param resource The optional URI, as a URI object or a string, to use to get resource-scoped configurations\n     */\n    public getConfiguration(extensionName: string, resource?: vscode.Uri | string): vscode.WorkspaceConfiguration {\n        if (typeof resource === 'string') {\n            try {\n                resource = this.parseUri(resource);\n            } catch (e) {\n                resource = undefined;\n            }\n        }\n        return vscode.workspace.getConfiguration(extensionName, resource as vscode.Uri);\n    }\n\n    /**\n     * Parse uri\n     */\n    public parseUri(uri: string): vscode.Uri {\n        return vscode.Uri.parse(uri);\n    }\n\n    public showOpenDialog(options: vscode.OpenDialogOptions): Thenable<vscode.Uri[] | undefined> {\n        return vscode.window.showOpenDialog(options);\n    }\n\n    public showErrorMessage(message: string, ...items: string[]): Thenable<string | undefined> {\n        return vscode.window.showErrorMessage(message, ...items);\n    }\n\n    // this was taken from the Agent extension, but throws the following error, come back to this if needed\n    // src\\apiWrapper.ts(72,9): error TS2322: Type 'string | undefined' is not assignable to type 'string'.\n    // public get workspaceRootPath(): string {\n    //     return vscode.workspace.rootPath;\n    // }\n}\n"],"sourceRoot":"C:\\GitHub\\sqlops-mssql-instance-insights/src"}