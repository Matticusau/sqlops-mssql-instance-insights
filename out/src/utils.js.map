{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":"AAAA,EAAE;AACF,uBAAuB;AACvB,sBAAsB;AACtB,iBAAiB;AACjB,EAAE;AACF,gCAAgC;AAChC,6FAA6F;AAC7F,uJAAuJ;AACvJ,EAAE;AAEF;;;gGAGgG;AAEhG,YAAY,CAAC;;AAEb,+BAA+B;AAC/B,yCAAyC;AACzC,6BAA6B;AAC7B,iCAAiC;AAEjC,yCAAyC;AACzC,2DAA2D;AAE3D;;;GAGG;AACH,kBAAyB,GAAQ;IAC7B,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC;IACrF,IAAI,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;IACxD,IAAI,YAAY,KAAK,IAAI,EAAE;QACvB,IAAI,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC,kBAAkB,EAAE,CAAC;QAClD,IAAI,SAAS,GAAG,GAAG,GAAG,WAAW,GAAG,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QACtE,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;KAC1B;AACL,CAAC;AARD,4BAQC;AAED,4BAAmC,aAAqB,EAAE,YAAoB,EAAE,cAAsB;IAClG,0EAA0E;IAC1E,IAAI,YAAY,GAAW,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;IAE/E,qCAAqC;IACrC,6DAA6D;IAC7D,oDAAoD;IACpD,OAAO,EAAE,CAAC,QAAQ,CAAC,YAAY,EAAE,OAAO,CAAC;SACpC,IAAI,CAAC,CAAC,YAAoB,EAAE,EAAE;QAC3B,IAAI,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAChD,OAAO,QAAQ,CAAC,cAAc,CAAC,CAAC;IACpC,CAAC,CAAC;SACD,IAAI,CACD,SAAS,EACT,CAAC,KAAU,EAAE,EAAE;QACX,QAAQ,CAAC,KAAK,CAAC,CAAC;QAChB,OAAO,kBAAkB,CAAC,kBAAkB,CAAC;IACjD,CAAC,CACJ,CAAC;AACV,CAAC;AAnBD,gDAmBC","file":"utils.js","sourcesContent":["//\n// Author:  Matt Lavery\n// Date:    02/07/2018\n// Purpose: Utils\n//\n// When         Who         What\n// ------------------------------------------------------------------------------------------\n// 02/07/2018   MLavery     Strictly set 'any' types to fix src\\extension.ts(50,55): error TS7006: Parameter 'connection' implicitly has an 'any' type.\n//\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as fs from 'fs-extra';\nimport * as handlebars from 'handlebars';\nimport * as path from 'path';\nimport * as vscode from 'vscode';\n\nimport * as Constants from './constants';\nimport * as LocalizedConstants from './localizedConstants';\n\n/**\n * Helper to log messages to the developer console if enabled\n * @param msg Message to log to the console\n */\nexport function logDebug(msg: any): void {\n    let config = vscode.workspace.getConfiguration(Constants.extensionConfigSectionName);\n    let logDebugInfo = config[Constants.configLogDebugInfo];\n    if (logDebugInfo === true) {\n        let currentTime = new Date().toLocaleTimeString();\n        let outputMsg = '[' + currentTime + ']: ' + msg ? msg.toString() : '';\n        console.log(outputMsg);\n    }\n}\n\nexport function renderTemplateHtml(extensionPath: string, templateName: string, templateValues: object): Thenable<string> {\n    // let templatePath = path.join(extensionPath, 'resources', templateName);\n    let templatePath: string = path.join(extensionPath, 'resources', templateName);\n\n    // 1) Read the template from the disk\n    // 2) Compile it as a handlebars template and render the HTML\n    // 3) On failure, return a simple string as an error\n    return fs.readFile(templatePath, 'utf-8')\n        .then((templateText: string) => {\n            let template = handlebars.compile(templateText);\n            return template(templateValues);\n        })\n        .then(\n            undefined,\n            (error: any) => {\n                logDebug(error);\n                return LocalizedConstants.msgErrorLoadingTab;\n            }\n        );\n}\n\n\n"],"sourceRoot":"C:\\GitHub\\sqlops-mssql-instance-insights/src"}